fs
glob
path
utils/tocase
print
parse
constants
traverse

log/print/

import ts from 'typescript';

function compile(fileNames: string[], options: ts.CompilerOptions): void {
  // Create a Program with an in-memory emit
  const createdFiles = {};
  const host = ts.createCompilerHost(options);
  host.writeFile = (fileName: string, contents: string) =>
    (createdFiles[fileName] = contents);

  // Prepare and emit the d.ts files
  const program = ts.createProgram(fileNames, options, host);
  program.emit();

  // Loop through all the input files
  fileNames.forEach((file) => {
    console.log('### JavaScript\n');
    console.log(host.readFile(file));

    console.log('### Type Definition\n');
    const dts = file.replace('.js', '.d.ts');
    console.log(createdFiles);
  });
}

compile(['src/aspect-ratio'], {
  declaration: true,
  emitDeclarationOnly: true,
});



function is_server() {
  return !(typeof window != 'undefined' && window.document);
}

const proxy = (k: any) => {
  if (is_server()) return class {};
  return class extends HTMLElement {
    constructor() {
      super();
      const a = new k();
    }
  };
};

const define = (name: string, k: any) => {
  if (is_server()) return;
  customElements.define(name, k);
};

class A {}

const AA = proxy(A);

define('a-b', AA);


// TODO
// declare global {
//     interface HTMLPlusAspectRatioElement {
//         value?: AspectRatioValue; // no init
//         // methods = yes
//         // events = no
//     }
//     var HTMLPlusAspectRatioElement: {
//         prototype: HTMLPlusAspectRatioElement;
//         new (): HTMLPlusAspectRatioElement;
//     };
//     interface PlusAspectRatio {
//         value?: AspectRatioValue; // no init
//         // methods = no
//         // events = yes
//     }
//     interface HTMLElementTagNameMap {
//         'plus-aspect-ratio': PlusAspectRatio
//     }
// }


// import { CallExpression, Expression, transformSync,parseSync,printSync } from '@swc/core';
// import { Visitor } from '@swc/core/Visitor';
// import { getEventName } from './utils';

// class ConsoleStripper extends Visitor {
//   visitCallExpression(expression: CallExpression): Expression {
//     if (expression.callee.type !== "MemberExpression") {
//       return expression;
//     }

//     if (
//       expression.callee.object.type === "Identifier" &&
//       expression.callee.object.value === "console"
//     ) {
//       if (expression.callee.property.type === "Identifier") {
//         return {
//           type: "UnaryExpression",
//           span: expression.span,
//           operator: "void",
//           argument: {
//             type: "NumericLiteral",
//             span: expression.span, 
//             value: 0,
//           },
//         };
//       }
//     }

//     return expression;
//   }
// }

// const ast = parseSync(
//   `
// if (foo) {
//     console.log("Foo") 
// } else {
//     console.log("Bar")
// }`
// );

// const out = transformSync(ast, 
// {   
//   plugin: (m) => new ConsoleStripper().visitProgram(m),
// }
// );

// console.log(
//   out, 
//   getEventName('onChange'), 
//   printSync(
//     ast
//   )
// )